<?xml version="1.0" encoding="UTF-8" ?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:rop="http://www.bookegou.com/schema/rop"
       xmlns:tx="http://www.springframework.org/schema/tx"
	   xmlns:aop="http://www.springframework.org/schema/aop"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
       	http://www.springframework.org/schema/beans/spring-beans-3.1.xsd
       	http://www.bookegou.com/schema/rop http://www.bookegou.com/schema/rop/rop-1.0.xsd
	    http://www.springframework.org/schema/context
	    http://www.springframework.org/schema/context/spring-context-3.1.xsd
	    http://www.springframework.org/schema/tx 
		http://www.springframework.org/schema/tx/spring-tx-3.0.xsd 
		http://www.springframework.org/schema/aop 
		http://www.springframework.org/schema/aop/spring-aop-3.0.xsd ">

	
	
	<!-- For DataSource settings and future properties files -->

	<bean id="configBean"
		class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
		<property name="location" value="classpath:dataSource.properties" />
	</bean>

	<bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource"
		init-method="init" destroy-method="close">
		<!-- 基本属性 url、user、password -->
		<property name="url" value="${dataSource.url}" />
		<property name="username" value="${dataSource.username}" />
		<property name="password" value="${dataSource.password}" />

		<!-- 配置初始化大小、最小、最大 -->
		<property name="initialSize" value="1" />
		<property name="minIdle" value="1" />
		<property name="maxActive" value="20" />

		<!-- 配置获取连接等待超时的时间 -->
		<property name="maxWait" value="60000" />

		<!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
		<property name="timeBetweenEvictionRunsMillis" value="60000" />

		<!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
		<property name="minEvictableIdleTimeMillis" value="300000" />

		<property name="validationQuery" value="SELECT 'x'" />
		<property name="testWhileIdle" value="true" />
		<property name="testOnBorrow" value="false" />
		<property name="testOnReturn" value="false" />

		<!-- 打开PSCache，并且指定每个连接上PSCache的大小, 用Oracle，则把poolPreparedStatements配置为true，mysql可以配置为false -->
		<property name="poolPreparedStatements" value="false" />
		<property name="maxPoolPreparedStatementPerConnectionSize"
			value="20" />

		<!-- 配置监控统计拦截的filters -->
		<property name="filters" value="wall,stat,slf4j" />

	</bean>

	<!-- DAO -->
	<bean id="jdbcTemplate" class="org.springframework.jdbc.core.JdbcTemplate">
		<property name="dataSource">
			<ref bean="dataSource" />
		</property>
	</bean>
	<context:annotation-config />
<!-- 
	<context:component-scan base-package="cn.com.carit.platform.dao.*" />
 -->
 	<bean id="accoundDao" class="cn.com.carit.platform.dao.impl.AccountDaoImpl"/>
 
	<!-- 定义事务处理类，不同的数据访问方式，事务处理类不同 比如：Hibernate操作的HibernateTransactionManager，JDBC操作的使用DataSourceTransactionManager -->
	<bean id="transactionManager"
		class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource" />
	</bean>
	<!-- 
	<context:component-scan base-package="cn.com.carit.platform.action.*" />
	 -->
	<!-- 声明使用注解式事务 -->
	<tx:annotation-driven transaction-manager="transactionManager" />


	<bean name="quartzJob" class="org.springframework.scheduling.quartz.JobDetailBean">
		<property name="jobClass" value="cn.com.carit.platform.job.RefreshCacheJob" />
		<!-- 接受一个Map,其中包含了需要设置给jobClass的各种属性 -->
		<property name="jobDataAsMap">
			<map></map>
		</property>
	</bean>
	<bean id="cronTrigger" class="org.springframework.scheduling.quartz.CronTriggerBean">
		<property name="jobDetail" ref="quartzJob" />
		<!-- 延迟5秒启动，每30分钟执行一次 -->
		<property name="cronExpression" value="5 0/30 * * * ?" />
	</bean>
	<bean id="SpringJobSchedulerFactoryBean"
		class="org.springframework.scheduling.quartz.SchedulerFactoryBean">
		<property name="triggers">
			<list>
				<ref bean="cronTrigger" />
			</list>
		</property>
	</bean>

	<!-- ROP框架配置 -->
	<!--① 扫描Spring Bean-->
    <context:component-scan base-package="cn.com.carit.platform.service"/>
    
    <!-- 启动Rop框架 -->
    <rop:annotation-driven
            session-manager="sessionManager"
            app-secret-manager="appSecretManager"
            service-access-controller="serviceAccessController"
            formatting-conversion-service="conversionService"
            ext-error-base-name="i18n/rop/sampleRopError"
            service-timeout-seconds="10"
            thread-ferry-class="cn.com.carit.platform.CaritThreadFerry"
            invoke-times-controller="invokeTimesController"
            upload-file-max-size="10"
            upload-file-types="jpg,png,gif"
            core-pool-size="200"
            max-pool-size="500"
            queue-capacity="50"
            keep-alive-seconds="300"
            sign-enable="true"/>

    <bean id="sessionManager" class="cn.com.carit.platform.security.CaritSessionManager" />
    <bean id="invokeTimesController" class="cn.com.carit.platform.security.CaritInvokeTimesController"/>

    <bean id="appSecretManager"  class="cn.com.carit.platform.security.CaritAppSecretManager"/>

    <bean id="serviceAccessController" class="cn.com.carit.platform.security.CaritServiceAccessController"/>

    <!--设置自定义的类型转换服务，注册自定义的类型转换器-->
    <bean id="conversionService" class="org.springframework.format.support.FormattingConversionServiceFactoryBean">
        <property name="converters">
            <set>
            </set>
        </property>
    </bean>

    <!--注册拦截器，可配置多个-->
    <rop:interceptors>
        <bean class="cn.com.carit.platform.interceptor.AddAccountInterceptor"/>
    </rop:interceptors>

    <!--注册监听器，可配置多具-->
    <rop:listeners>
        <bean class="cn.com.carit.platform.listener.PostInitializeEventListener"/>
        <bean class="cn.com.carit.platform.listener.PreDoServiceEventListener"/>
        <bean class="cn.com.carit.platform.listener.AfterDoServiceEventListener"/>
    </rop:listeners>

    <!--自定义method,appKey等这些系统级参数的参数名-->
    <rop:sysparams format-param-name="messageFormat"/>

</beans>